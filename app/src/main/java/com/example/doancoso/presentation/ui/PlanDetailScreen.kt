package com.example.doancoso.presentation.ui

import androidx.compose.foundation.clickable
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.navigation.NavHostController
import com.example.doancoso.domain.PlanViewModel
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.doancoso.data.models.PlanResultDb
import com.example.doancoso.domain.PlanUiState

@Composable
fun PlanDetailScreen(
    navController: NavHostController,
    authViewModel: AuthViewModel,
    planId: String,
    planViewModel: PlanViewModel,
) {
    val planState by planViewModel.planState.collectAsState()
    val authState by authViewModel.authState.collectAsState()

    val user = (authState as? AuthState.UserLoggedIn)?.user
    // Fetch k·∫ø ho·∫°ch t·ª´ Firebase
    LaunchedEffect(authState) {
        if (authState is AuthState.Idle || user == null) {
            navController.navigate("login") {
                popUpTo("home") { inclusive = true }
            }
        } else {
            user.uid.let {
                planViewModel.fetchPlanByIdFromFirebase(user.uid, planId)
            }
        }
    }

    when (planState) {
        is PlanUiState.Loading -> {
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
            }
        }
        is PlanUiState.Success -> {
            val plan = (planState as PlanUiState.Success).plan
            if (plan is PlanResultDb) {
                PlanDetailContent(plan, navController) // Truy·ªÅn navController v√†o ƒë√¢y
            } else {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(text = "Kh√¥ng th·ªÉ hi·ªÉn th·ªã k·∫ø ho·∫°ch", color = MaterialTheme.colorScheme.error)
                }
            }
        }
        is PlanUiState.Error -> {
            val message = (planState as PlanUiState.Error).message
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                Text(text = "L·ªói: $message", color = MaterialTheme.colorScheme.error)
            }
        }
        else -> {}
    }
}

@Composable
fun PlanDetailContent(planDb: PlanResultDb, navController: NavHostController) {  // Th√™m navController v√†o ƒë√¢y
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        item {
            // Th√¥ng tin chung c·ªßa k·∫ø ho·∫°ch
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = MaterialTheme.shapes.large,
                elevation = CardDefaults.cardElevation(8.dp),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text(
                        text = "üìç ƒêi·ªÉm ƒë·∫øn: ${planDb.destination}",
                        fontSize = 22.sp,
                        color = MaterialTheme.colorScheme.primary,
                        style = MaterialTheme.typography.headlineSmall
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "üìÖ B·∫Øt ƒë·∫ßu: ${planDb.itinerary.startDate}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    Text(
                        text = "üìÖ K·∫øt th√∫c: ${planDb.itinerary.endDate}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "üóìÔ∏è T·ªïng s·ªë ng√†y: ${planDb.itinerary.itinerary.size} ng√†y",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    // Hi·ªÉn th·ªã c√°c m√≥n ƒë·∫∑c s·∫£n
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "üçΩÔ∏è ƒê·∫∑c s·∫£n g·ª£i √Ω: ${planDb.itinerary.specialties.joinToString(", ")}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    // Hi·ªÉn th·ªã c√°c ph∆∞∆°ng ti·ªán di chuy·ªÉn
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "üöó Ph∆∞∆°ng ti·ªán di chuy·ªÉn: ${planDb.itinerary.transportation.joinToString(", ")}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "üìù Chi ti·∫øt l·ªãch tr√¨nh: ",
                style = MaterialTheme.typography.headlineSmall,
                modifier = Modifier.padding(bottom = 8.dp)
            )
        }

        // Danh s√°ch l·ªãch tr√¨nh theo t·ª´ng ng√†y
        itemsIndexed(planDb.itinerary.itinerary) { index, dayPlan ->
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = MaterialTheme.shapes.medium,
                elevation = CardDefaults.cardElevation(4.dp),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.background)
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text(
                        text = "Ng√†y ${index + 1}",
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.primary
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // Danh s√°ch c√°c ho·∫°t ƒë·ªông trong ng√†y
                    dayPlan.activities?.forEach { activity ->
                        Text(
                            text = "‚Ä¢ ${activity.description}",
                            style = MaterialTheme.typography.bodyMedium,
                            color = Color.DarkGray,
                            modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                        )
                        Text(
                            text = "  üìç ${activity.location}",
                            style = MaterialTheme.typography.bodySmall,
                            color = Color.Gray,
                            modifier = Modifier.padding(start = 8.dp, bottom = 4.dp).clickable {
                                // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt ƒëi·ªÉm ƒë·∫øn
                                navController.navigate("destinationDetail/${activity.location}")
                            }
                        )
                        Text(
                            text = "  üïí ${activity.timeOfDay}",
                            style = MaterialTheme.typography.bodySmall,
                            color = Color.Gray,
                            modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                        )
                        Text(
                            text = "  üöó Ph∆∞∆°ng ti·ªán: ${activity.transportation}",
                            style = MaterialTheme.typography.bodySmall,
                            color = Color.Gray,
                            modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                        )
                    }
                }
            }
        }
    }
}
