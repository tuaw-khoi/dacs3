package com.example.doancoso.presentation.ui

import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Warning
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import com.example.doancoso.data.models.PlanResultDb
import com.example.doancoso.domain.AuthState
import com.example.doancoso.domain.AuthViewModel
import com.example.doancoso.domain.PlanUiState
import com.example.doancoso.domain.PlanViewModel

@Composable
fun PlanDetailOwnerScreen(
    navController: NavHostController,
    authViewModel: AuthViewModel,
    planId: String,
    planViewModel: PlanViewModel,
) {
    val planState by planViewModel.planState.collectAsState()
    val authState by authViewModel.authState.collectAsState()
    val user = (authState as? AuthState.UserLoggedIn)?.user
    val context = LocalContext.current

    val isFromDeepLink = authViewModel.pendingDeepLinkUid != null && authViewModel.pendingDeepLinkPlanId != null
    var currentUid = authViewModel.pendingDeepLinkUid

    Log.d("PlanDetailScreen", ": $currentUid")
    // Fetch k·∫ø ho·∫°ch t·ª´ Firebase
    LaunchedEffect(planId) {
        Log.d("PlanDetailScreen", "LaunchedEffect triggered with planId: $planId")
        if (authState is AuthState.Idle || user == null) {
            Log.d("PlanDetailScreen", "User not logged in, navigating to login")
            navController.navigate("login") {
                popUpTo(navController.graph.startDestinationId) {
                    inclusive = true
                }
            }
        } else {
            Log.d("PlanDetailScreen", "Fetching plan details for planId: $planId")
            planViewModel.fetchPlanByIdFromFirebase(currentUid.toString(), planId)
        }
    }

    when (planState) {
        is PlanUiState.Loading -> {
            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                CircularProgressIndicator()
                Spacer(modifier = Modifier.height(8.dp))
                Text("ƒêang t·∫£i...")
            }
        }

        is PlanUiState.Success -> {
            val plan = (planState as PlanUiState.Success).plan
            if (plan is PlanResultDb) {
                if (user != null) {
                    // Truy·ªÅn th√™m ownerUserId (userId cha) v√†o PlanDetailContent
                    PlanDetailOwnerContent(
                        planDb = plan,
                        navController = navController,
                        planId = planId,
                        planViewModel = planViewModel,
                        owner = currentUid.toString(),
                        userId = user.uid,
                        isFromDeepLink = isFromDeepLink
                    )

                }
            } else {
                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                    Text(
                        text = "Kh√¥ng th·ªÉ hi·ªÉn th·ªã k·∫ø ho·∫°ch",
                        color = MaterialTheme.colorScheme.error
                    )
                }
            }
        }


        is PlanUiState.Error -> {
            val message = (planState as PlanUiState.Error).message
            Box(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(16.dp),
                contentAlignment = Alignment.Center
            ) {
                Surface(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(24.dp),
                    shape = MaterialTheme.shapes.medium,
                    color = MaterialTheme.colorScheme.surface.copy(alpha = 0.1f)
                ) {
                    Row(
                        modifier = Modifier
                            .padding(16.dp)
                            .fillMaxWidth(),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            imageVector = Icons.Default.Warning,
                            contentDescription = "Kh√¥ng c√≥ d·ªØ li·ªáu",
                            tint = MaterialTheme.colorScheme.error,
                            modifier = Modifier.padding(end = 16.dp)
                        )
                        Text(
                            text = message ?: "Kh√¥ng c√≥ d·ªØ li·ªáu k·∫ø ho·∫°ch",
                            style = MaterialTheme.typography.bodyMedium.copy(
                                color = MaterialTheme.colorScheme.onSurface,
                                fontWeight = FontWeight.Bold
                            ),
                            modifier = Modifier.fillMaxWidth(),
                            textAlign = TextAlign.Center // ƒê·∫∑t text cƒÉn gi·ªØa
                        )
                    }
                }
            }
        }

        else -> {}
    }
}

@Composable
fun PlanDetailOwnerContent(
    planDb: PlanResultDb,
    navController: NavHostController,
    planId: String,
    planViewModel: PlanViewModel,
    owner: String,
    userId:String,
    isFromDeepLink: Boolean
) {
    var showDeleteDialog by remember { mutableStateOf(false) }
    var dayIndexToDelete by remember { mutableStateOf(-1) }
    var showJoinDialog by remember { mutableStateOf(false) }
    val context = LocalContext.current

    // S·ª≠ d·ª•ng state ƒë·ªÉ l∆∞u quy·ªÅn ch·ªânh s·ª≠a
    var canEdit by remember { mutableStateOf(false) }

    // Ki·ªÉm tra quy·ªÅn khi planId ho·∫∑c currentUid thay ƒë·ªïi
    LaunchedEffect(planId, userId, isFromDeepLink) {
        canEdit = (owner == userId) && !isFromDeepLink

    }

    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        item {
//            if (!canEdit) {
//                Card(
//                    modifier = Modifier
//                        .fillMaxWidth()
//                        .padding(bottom = 16.dp),
//                    colors = CardDefaults.cardColors(containerColor = Color(0xFFFFF3E0)),
//                    elevation = CardDefaults.cardElevation(4.dp)
//                ) {
//                    Column(Modifier.padding(16.dp)) {
//                        Text(
//                            text = "üì© B·∫°n ch·ªâ c√≥ th·ªÉ xem k·∫ø ho·∫°ch n√†y. Mu·ªën tr·ªü th√†nh ch·ªß s·ªü h·ªØu?",
//                            color = Color(0xFFEF6C00),
//                            style = MaterialTheme.typography.bodyMedium,
//                        )
//                        Spacer(modifier = Modifier.height(8.dp))
//                        Button(onClick = { showJoinDialog = true }) {
//                            Text("Tham gia l√†m ch·ªß s·ªü h·ªØu")
//                        }
//                    }
//                }
//            }

            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = MaterialTheme.shapes.large,
                elevation = CardDefaults.cardElevation(8.dp),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "üìç ƒêi·ªÉm ƒë·∫øn: ${planDb.destination}",
                            fontSize = 22.sp,
                            color = MaterialTheme.colorScheme.primary,
                            style = MaterialTheme.typography.headlineSmall
                        )

                        // N·∫øu user kh√¥ng ph·∫£i ng∆∞·ªùi m·ªùi, hi·ªÉn th·ªã n√∫t ch·ªânh s·ª≠a
                        if (canEdit) {
                            TextButton(onClick = {
                                navController.navigate("editPlan/$planId")
                            }) {
                                Text("Ch·ªânh s·ª≠a", color = MaterialTheme.colorScheme.primary)
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "üìÖ B·∫Øt ƒë·∫ßu: ${planDb.itinerary.startDate}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    Text(
                        text = "üìÖ K·∫øt th√∫c: ${planDb.itinerary.endDate}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    Text(
                        text = "üóìÔ∏è T·ªïng s·ªë ng√†y: ${planDb.itinerary.itinerary.size} ng√†y",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "üçΩÔ∏è ƒê·∫∑c s·∫£n g·ª£i √Ω: ${planDb.itinerary.specialties.joinToString(", ")}",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "üöó Ph∆∞∆°ng ti·ªán di chuy·ªÉn: ${
                            planDb.itinerary.transportation.joinToString(", ")
                        }",
                        fontSize = 16.sp,
                        color = Color.Gray
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "üìù Chi ti·∫øt l·ªãch tr√¨nh: ",
                style = MaterialTheme.typography.headlineSmall,
                modifier = Modifier.padding(bottom = 8.dp)
            )
        }

        itemsIndexed(planDb.itinerary.itinerary) { index, dayPlan ->

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                shape = MaterialTheme.shapes.medium,
                elevation = CardDefaults.cardElevation(4.dp),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.background)
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Ng√†y ${index + 1}",
                            style = MaterialTheme.typography.titleMedium,
                            color = MaterialTheme.colorScheme.primary
                        )

                        // N·∫øu user kh√¥ng ph·∫£i ng∆∞·ªùi m·ªùi, hi·ªÉn th·ªã n√∫t x√≥a ng√†y v√† ch·ªânh s·ª≠a
                        if (canEdit) {
                            // N√∫t x√≥a ng√†y
                            IconButton(
                                onClick = {
                                    dayIndexToDelete = index
                                    showDeleteDialog = true
                                }
                            ) {
                                Icon(
                                    imageVector = Icons.Filled.Delete,
                                    contentDescription = "X√≥a ng√†y",
                                    tint = Color.Red
                                )
                            }

                            // N√∫t ch·ªânh s·ª≠a ng√†y
                            TextButton(onClick = {
                                navController.navigate("editDay/$planId/$owner/$index")
                            }) {
                                Text("Ch·ªânh s·ª≠a ng√†y", color = MaterialTheme.colorScheme.primary)
                            }
                        }
                    }

                    Spacer(modifier = Modifier.height(8.dp))

                    val sortedActivities = dayPlan.activities
                        ?.sortedWith(compareBy { activity ->
                            when (activity.timeOfDay) {
                                "Bu·ªïi S√°ng" -> 0
                                "Bu·ªïi Chi·ªÅu" -> 1
                                "Bu·ªïi T·ªëi" -> 2
                                else -> 3
                            }
                        })

                    // Danh s√°ch c√°c ho·∫°t ƒë·ªông trong ng√†y
                    sortedActivities?.forEachIndexed { activityIndex, activity ->
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = "‚Ä¢ ${activity.description}",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = Color.DarkGray,
                                    modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                                )
                                Text(
                                    text = "üìç ${activity.location}",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = Color.Gray,
                                    modifier = Modifier
                                        .padding(start = 8.dp, bottom = 4.dp)
                                        .clickable {
                                            // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh chi ti·∫øt ƒëi·ªÉm ƒë·∫øn
                                            navController.navigate("destinationDetail/${activity.location}")
                                        }
                                )
                                Text(
                                    text = "üïí ${activity.timeOfDay}",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = Color.Gray,
                                    modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                                )
                                Text(
                                    text = "üöó Ph∆∞∆°ng ti·ªán: ${activity.transportation}",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = Color.Gray,
                                    modifier = Modifier.padding(start = 8.dp, bottom = 4.dp)
                                )
                            }

                            // N√∫t x√≥a ho·∫°t ƒë·ªông
                            if (canEdit) { IconButton(
                                onClick = {
                                    planViewModel.deleteActivityFromPlan(
                                        index,
                                        activityIndex,
                                        planId,
                                        owner
                                    )
                                }
                            ) {
                                Icon(
                                    Icons.Filled.Delete,
                                    contentDescription = "X√≥a ho·∫°t ƒë·ªông",
                                    tint = Color.Red
                                )
                            }}

                        }
                    }
                }
            }
        }

        item {
            Spacer(modifier = Modifier.height(16.dp))

            if (canEdit) {
                Button(
                    onClick = {
                        planViewModel.addDayToPlan(owner, planId) { newDayIndex ->
                            navController.navigate("editDay/$planId/$owner/$newDayIndex")
                        }
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 16.dp)
                        .height(48.dp),
                    shape = MaterialTheme.shapes.medium,
                    colors = ButtonDefaults.buttonColors(MaterialTheme.colorScheme.secondary)
                ) {
                    Text(
                        text = "Th√™m ng√†y m·ªõi",
                        style = MaterialTheme.typography.labelLarge,
                        color = Color.White
                    )
                }
            }
        }
    }

    // C·∫£nh b√°o x√°c nh·∫≠n x√≥a ng√†y
    if (showDeleteDialog) {
        AlertDialog(
            onDismissRequest = { showDeleteDialog = false },
            title = { Text("X√≥a ng√†y") },
            text = { Text("B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a ng√†y ${dayIndexToDelete + 1}?") },
            confirmButton = {
                TextButton(
                    onClick = {
                        planViewModel.deleteDayFromPlan(
                            dayIndexToDelete,
                            planId,
                            owner,
                            navController
                        )
                        showDeleteDialog = false
                    }
                ) {
                    Text("X√≥a", color = Color.Red)
                }
            },
            dismissButton = {
                TextButton(
                    onClick = { showDeleteDialog = false }
                ) {
                    Text("H·ªßy")
                }
            }
        )
    }

    // Dialog x√°c nh·∫≠n tham gia l√†m ch·ªß s·ªü h·ªØu
    if (showJoinDialog) {
        AlertDialog(
            onDismissRequest = { showJoinDialog = false },
            title = { Text("Tham gia l√†m ch·ªß s·ªü h·ªØu") },
            text = { Text("B·∫°n mu·ªën tr·ªü th√†nh ch·ªß s·ªü h·ªØu k·∫ø ho·∫°ch n√†y?") },
            confirmButton = {
                TextButton(
                    onClick = {
                        planViewModel.addOwnerToPlan(
                            planId = planId,
                            currentUid = owner,
                            ownerUid = userId,
                            onSuccess = {
                                showJoinDialog = false
                                Toast.makeText(context, "ƒê√£ th√™m b·∫°n l√†m ch·ªß s·ªü h·ªØu!", Toast.LENGTH_SHORT).show()
                            },
                            onError = {
                                showJoinDialog = false
                                Toast.makeText(context, "C√≥ l·ªói: $it", Toast.LENGTH_SHORT).show()
                            }
                        )
                    }
                ) { Text("ƒê·ªìng √Ω") }
            },
            dismissButton = {
                TextButton(onClick = { showJoinDialog = false }) { Text("H·ªßy") }
            }
        )
    }
}








